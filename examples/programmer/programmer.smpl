!pattern ( A $name:lit has a $( $param:lit )(,)... ) => {
    function $name ( $( $param )(,)... ){
        $( this.$param = $param )(;)... ;
    }
    var create$name  = (function () {
        function create (args) {
            return $name.apply(this, args)
        }
        create.prototype = $name.prototype;
        return function () { return new create(arguments) }
    })()
}
capture Class ( function $name:lit ) => { $name }
pattern ( $name:lit are a list of $clss:Class : $( $inputs:brack )(,)... ) => {
    var $name = [$( create$clss.apply(null, $inputs ) )(,)...]
}
!pattern (for every $clss:Class in $name:lit , $action:lit( )... ) => {
    $name.forEach(($clss)=> {
        $action
    });
}
pattern ( $action:lit(.)... $input:lit||""$input) }
}
A Programmer has a name, age, skills;
programers are a list of Programmer :
    ["jamel", 10, "nothing"],
    ["james", 20, "noway"];

for every Programmer in programmers , console.log name if skillset exists;
